name: Release and Publish

on:
  push:
    branches:
      - main # or main

permissions:
  contents: read # for checkout

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release (Lerna needs this to push version commits and tags)
      issues: write # to be able to comment on released issues (if Lerna's conventional commits/changelog does this)
      pull-requests: write # to be able to comment on released pull requests (if Lerna's conventional commits/changelog does this)
      id-token: write # to enable use of OIDC for npm provenance (still good for npm publish via pnpm)
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Lerna needs full history to detect changes and version correctly
          token: ${{ secrets.GITHUB_TOKEN }} # Ensure this token has write access for pushing back

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*" # Uses the latest LTS Node.js version
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
          registry-url: 'https://registry.npmjs.org/' # Configures npm for publishing

      - name: Install pnpm
        # pnpm is not always pre-installed on GitHub Actions runners, so it's good practice to install it.
        run: npm install -g pnpm

      - name: Install dependencies
        # <--- CHANGED: Use pnpm install for dependency installation
        # '--frozen-lockfile' is recommended in CI to ensure reproducible builds
        run: pnpm install --frozen-lockfile

      # --- REMOVED: npm audit signatures ---
      # pnpm has its own integrity checks built into its lockfile and installation process.
      # 'npm audit signatures' is specific to npm's provenance feature and doesn't apply directly to pnpm.
      # If pnpm introduces a similar feature, you'd add its command here.

      - name: Build packages
        # This step runs the 'build' script in each of your Lerna-managed packages.
        # Ensure each package's package.json has a "build" script.
        run: npx lerna run build --stream --sort

      - name: Configure Git User
        # Lerna will make commits for version bumps and tags, so it needs a Git user configured.
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Lerna Publish
        env:
          # Lerna uses NODE_AUTH_TOKEN for authenticating with the npm registry.
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          # GITHUB_TOKEN is used by Lerna for creating GitHub releases and pushing tags.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # `lerna publish` will:
          # 1. Detect which packages have changed since the last release.
          # 2. Based on your commit messages (due to --conventional-commits), determine the next semantic version.
          # 3. Update package.json files with the new versions.
          # 4. Generate/update CHANGELOG.md files (if configured in lerna.json).
          # 5. Create Git commits for the version bumps and push them to your repo.
          # 6. Create Git tags for the new versions and push them.
          # 7. Publish the updated packages to npm (Lerna will use pnpm for this if configured).
          # 8. Create GitHub Releases for the new tags (due to --create-release github).
          npx lerna publish --yes --conventional-commits --create-release github
          # --yes: Automatically confirms prompts, essential for non-interactive CI.
          # --conventional-commits: Enables Lerna's semantic versioning and changelog generation based on commit messages.
          # --create-release github: Tells Lerna to create a GitHub release for each new version tag.